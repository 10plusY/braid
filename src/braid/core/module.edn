{:name core
 :doc "Braid core"

 :provides
 {:clj
  {:register-server-message-handlers
   {:fn braid.server.sync-handler/register-server-message-handlers!
    :doc "Add a map of websocket-event-name -> event-handler-fn to handle events from the client"}

   :register-db-schema
   {:fn braid.server.schema/register-db-schema!
    :doc "Add new datoms to the db schema"}

   :register-initial-user-data
   {:fn braid.server.sync/register-initial-user-data!
    :doc "Add a map of key -> fn for getting the initial user data to be sent to the client. `fn` will recieve the user-id as its argument. See `:register-initial-user-data-handler` under `:cljs`"}}

  :cljs
  {:register-header-view
   {:fn braid.client.ui.views.header/register-header-view!
    :doc "Add a new view to appear in the header row at the top"}

   :register-styles
   {:fn braid.client.ui.views.styles/register-styles!
    :doc "Add Garden CSS styles to the page styles"}

   :register-initial-user-data-handler
   {:fn braid.client.core.events/register-initial-user-data-handler!
    :doc "Add a handler that will run with the initial db & user-info recieved from the server. See `:register-initial-user-data` under `:clj`"}

   :register-event-listener
   {:fn braid.core.api/register-event-listener!
    :doc "Register a function to intercept re-frame events."}

   :register-state
   {:fn braid.state.core/register-state!
    :doc "Add a key and initial value to the default app state, plus an associated spec."}}}}
